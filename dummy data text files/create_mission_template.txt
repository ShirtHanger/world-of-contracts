Create 10 missions for me in accordance to this schema like last time. 

Save them all under new_mission, then do new_mission.save() after each input for bulk.

Make the mission debrief long and descriptive. Very. Ignore the agents ManyToManyField I will implement that later

# Mission Limits
MISSION_URGENCIES = (
    ('R', REDACTED_LABEL), # Redacted default value
    ('T', 'Trivial'),
    ('L', 'Low Priority'),
    ('M', 'Medium Priority'),
    ('H', 'High Priority'),
    ('C', 'Critical'),
    ('E', 'Emergency'),
)
MISSION_TYPES = (
    ('U', 'Unspecified'), # Redacted default value
    ('R', 'Reconnaissance'),
    ('E', 'Extraction'),
    ('A', 'Assassination'),
    ('S', 'Sabotage'),
    ('O', 'Covert/Black Ops'),
    ('I', 'Infiltration'),
    ('D', 'Diplomatic Escort'),
    ('P', 'Protection Detail'),
    ('T', 'Training Mission'),
    ('U', 'Undercover Operation'),
)

class Mission (models.Model):
    
    code_name = models.CharField(max_length=255)
    debrief = models.TextField(max_length=7000, default=expunge_data()) # Make these very, very long and descriptive
    location = models.CharField(max_length=255, default=expunge_data()) 
    # agents = models.ManyToManyField(Agent) # Must define agent above mission for this to work
    objective = models.CharField(max_length=255, default=expunge_data())
    
    urgency = models.CharField( # Limited choices
        max_length=1, 
        choices=MISSION_URGENCIES,
        # Default = Trivial
        default=MISSION_URGENCIES[0][0]
    ) 
    
    client = models.CharField(max_length=255)  
    mission_type = models.CharField( # Limited choices
        max_length=1, 
        choices=MISSION_TYPES,
        # Default = Unspecified
        default=MISSION_TYPES[0][0]
    )
    date = models.DateField()  # Consider removing if issues with code

    def __str__(self):
        return f"{self.mission_type} - {self.location} ({self.urgency})"
    
    # Method gets the URL for a particular mission instance
    def get_absolute_url(self):
        # Use the 'reverse' function to dynamically find the URL for viewing this mission's details
        return reverse('mission-detail', kwargs={'mission_id': self.id})
    
    class Meta:
        ordering = ['-date']
        
    
 
End